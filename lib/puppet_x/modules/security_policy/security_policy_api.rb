# #Security Policy API
# No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
# OpenAPI spec version: 3.0.0
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.2.3

require 'uri'
require_relative '../../swagger_client/api_client'
require 'typhoeus'

module SwaggerClient
  class SecurityPolicyApi
    attr_accessor :api_client

    def initialize(url)
      @api_client = ApiClient.default(url)
    end

    # FETCH Information of Security Policy
    #
    # @param authorization Login token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields
    # @return [nil]
    def security_policies_get(authorization, opts = {})
      data, status_code, headers = security_policies_get_with_http_info(authorization, opts)
      [data, status_code, headers]
    end

    # FETCH Information of Security Policy
    #
    # @param authorization Login token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_get_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityPolicyApi.security_policies_get ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        raise ArgumentError, "Missing the required parameter 'authorization' when calling SecurityPolicyApi.security_policies_get"
      end
      # resource path
      local_var_path = '/security-policies'

      # query parameters
      query_params = {}
      query_params[:fields] = @api_client.build_collection_param(opts[:fields], :multi) unless opts[:fields].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:Authorization] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityPolicyApi#security_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # DELETE Information of Security Policy
    #
    # @param authorization Login token
    # @param policy_name Policy Name of Security Policy
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def security_policies_policy_name_delete(authorization, policy_name, opts = {})
      data, status_code, headers = security_policies_policy_name_delete_with_http_info(authorization, policy_name, opts)
      [data, status_code, headers]
    end

    # DELETE Information of Security Policy
    #
    # @param authorization Login token
    # @param policy_name Policy Name of Security Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_policy_name_delete_with_http_info(authorization, policy_name, _opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityPolicyApi.security_policies_policy_name_delete ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        raise ArgumentError, "Missing the required parameter 'authorization' when calling SecurityPolicyApi.security_policies_policy_name_delete"
      end
      # verify the required parameter 'policy_name' is set
      if @api_client.config.client_side_validation && policy_name.nil?
        raise ArgumentError, "Missing the required parameter 'policy_name' when calling SecurityPolicyApi.security_policies_policy_name_delete"
      end
      # resource path
      local_var_path = '/security-policies/{Policy Name}'.sub('{' + 'Policy Name' + '}', policy_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:Authorization] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityPolicyApi#security_policies_policy_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # FETCH Information of Security Policy
    #
    # @param authorization Login token
    # @param policy_name Policy Name of Security Policy
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields
    # @return [nil]
    def security_policies_policy_name_get(authorization, policy_name, opts = {})
      data, status_code, headers = security_policies_policy_name_get_with_http_info(authorization, policy_name, opts)
      [data, status_code, headers]
    end

    # FETCH Information of Security Policy
    #
    # @param authorization Login token
    # @param policy_name Policy Name of Security Policy
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_policy_name_get_with_http_info(authorization, policy_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityPolicyApi.security_policies_policy_name_get ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        raise ArgumentError, "Missing the required parameter 'authorization' when calling SecurityPolicyApi.security_policies_policy_name_get"
      end
      # verify the required parameter 'policy_name' is set
      if @api_client.config.client_side_validation && policy_name.nil?
        raise ArgumentError, "Missing the required parameter 'policy_name' when calling SecurityPolicyApi.security_policies_policy_name_get"
      end
      # resource path
      local_var_path = '/security-policies/{Policy Name}'.sub('{' + 'Policy Name' + '}', policy_name.to_s)

      # query parameters
      query_params = {}
      query_params[:fields] = @api_client.build_collection_param(opts[:fields], :multi) unless opts[:fields].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:Authorization] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityPolicyApi#security_policies_policy_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # EDIT Information of Security Policy
    #
    # @param authorization Login token
    # @param policy_name Policy Name of Security Policy
    # @param security_policy Body Parameter of Security Policy
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def security_policies_policy_name_put(authorization, policy_name, security_policy, opts = {})
      data, status_code, headers = security_policies_policy_name_put_with_http_info(authorization, policy_name, security_policy, opts)
      [data, status_code, headers]
    end

    # EDIT Information of Security Policy
    #
    # @param authorization Login token
    # @param policy_name Policy Name of Security Policy
    # @param security_policy Body Parameter of Security Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_policy_name_put_with_http_info(authorization, policy_name, security_policy, _opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityPolicyApi.security_policies_policy_name_put ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        raise ArgumentError, "Missing the required parameter 'authorization' when calling SecurityPolicyApi.security_policies_policy_name_put"
      end
      # verify the required parameter 'policy_name' is set
      if @api_client.config.client_side_validation && policy_name.nil?
        raise ArgumentError, "Missing the required parameter 'policy_name' when calling SecurityPolicyApi.security_policies_policy_name_put"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        raise ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityPolicyApi.security_policies_policy_name_put"
      end
      # resource path
      local_var_path = '/security-policies/{Policy Name}'.sub('{' + 'Policy Name' + '}', policy_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:Authorization] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityPolicyApi#security_policies_policy_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # ADD Information of Security Policy
    #
    # @param authorization Login token
    # @param security_policy Body Parameter of Security Policy
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def security_policies_post(authorization, security_policy, opts = {})
      data, status_code, headers = security_policies_post_with_http_info(authorization, security_policy, opts)
      [data, status_code, headers]
    end

    # ADD Information of Security Policy
    #
    # @param authorization Login token
    # @param security_policy Body Parameter of Security Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_post_with_http_info(authorization, security_policy, _opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityPolicyApi.security_policies_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        raise ArgumentError, "Missing the required parameter 'authorization' when calling SecurityPolicyApi.security_policies_post"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        raise ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityPolicyApi.security_policies_post"
      end
      # resource path
      local_var_path = '/security-policies'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:Authorization] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityPolicyApi#security_policies_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
